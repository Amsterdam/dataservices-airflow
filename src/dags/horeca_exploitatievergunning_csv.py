import os

import pandas as pd
from airflow import DAG
from airflow.operators.postgres_operator import PostgresOperator
from airflow.operators.python_operator import PythonOperator
from geoalchemy2 import Geometry, WKTElement
from shapely import wkt
from shapely.geometry.multipolygon import MultiPolygon
from shapely.geometry.polygon import Polygon
from shapely.geometry.point import Point
from sqlalchemy.types import Date, Integer, Text

from common import default_args
from common.sql import SQL_CHECK_COUNT, SQL_CHECK_GEO
from common.db import get_engine, get_ora_engine
from postgres_check_operator import PostgresCheckOperator
from swift_hook import SwiftHook

dag_id = "horeca_exploitatievergunning_csv"

table_name = dag_id
table_name_new = f"{table_name}_new"
SQL_TABLE_RENAME = f"""
    DROP TABLE IF EXISTS {table_name} CASCADE;
    ALTER TABLE {table_name_new} RENAME TO {table_name};
    ALTER TABLE {table_name} RENAME CONSTRAINT {table_name_new}_pkey TO {table_name}_pkey;
    ALTER INDEX ix_{table_name_new}_id RENAME TO ix_{table_name}_id;
    ALTER INDEX idx_{table_name_new}_locatie RENAME TO idx_{table_name}_locatie;
    ALTER INDEX idx_{table_name_new}_terrasgeometrie RENAME TO idx_{table_name}_terrasgeometrie;
"""


def wkt_loads_wrapped(data):
    p = wkt.loads(data)
    if isinstance(p, Polygon):
        p = MultiPolygon([p])
    elif isinstance(p, MultiPolygon) or isinstance(p, Point):
        pass
    else:
        p = None
    if p:
        p = WKTElement(p.wkt, srid=4326)
    return p


def load_from_csv(table_name):

    tmp_dir = f"/tmp/{dag_id}"
    container = "horeca_exploitatievergunning"
    csv_file = "exploitatievergunningen_horecabedrijf.csv"
    local_cvs_file = f"{tmp_dir}/csv_file"
    os.makedirs(tmp_dir, exist_ok=True)

    hook = SwiftHook()
    hook.download(container=container, object_id=csv_file, output_path=local_cvs_file)
    df = pd.read_csv(local_cvs_file, parse_dates=["begindatum", "einddatum"])
    dtype = {
        "zaaknummer": Integer(),
        "zaaknaam": Text(),
        "zaakcategorie": Text(),
        "zaakspecificatie": Text(),
        "begindatum": Date(),
        "eindatum": Date(),
        "openingstijden_zo_do_van": Text(),
        "openingstijden_zo_do_tot": Text(),
        "openingstijden_vr_za_van": Text(),
        "openingstijden_vr_za_tot": Text(),
        "o_tijden_terras_zo_do_van": Text(),
        "o_tijden_terras_zo_do_tot": Text(),
        "o_tijden_terras_vr_za_van": Text(),
        "o_tijden_terras_vr_za_tot": Text(),
        "locatie": Geometry(geometry_type="POINT", srid=4326),
        "terrasgeometrie": Geometry(geometry_type="MULTIPOLYGON", srid=4326),
        "postcode": Text(),
        "status_vergunning": Text(),
        "status_tijdelijk_terras": Text(),
        "toestemming_tijdelijk_terras": Text(),
        "publ_besluit_tijdelijk_terras": Text(),
        "terrastekening": Text(),
    }
    db_engine = get_engine()
    df.to_sql(table_name, db_engine, if_exists="replace", index_label="id", dtype=dtype)
    with db_engine.connect() as connection:
        connection.execute(f"ALTER TABLE {table_name} ADD PRIMARY KEY (id)")
        connection.execute(
            f"""
            ALTER TABLE {table_name}
            ALTER COLUMN terrasgeometrie TYPE geometry(MultiPolygon,28992)
            USING ST_Transform(terrasgeometrie,28992)
             """
        )
        connection.execute(
            f"""
             ALTER TABLE {table_name}
             ALTER COLUMN locatie TYPE geometry(Point,28992)
             USING ST_Transform(locatie,28992)
             """
        )
        # connection.execute(f"DELETE FROM {table_name} WHERE terrasgeometrie is NULL")
        connection.execute(
            f"""
             UPDATE {table_name}
             SET geometry = ST_CollectionExtract(ST_Makevalid(terrasgeometrie), 3)
             WHERE ST_IsValid(terrasgeometrie) = False;
         """
        )


with DAG(
    dag_id, default_args=default_args, description="Horeca Exploitatievergunning",
) as dag:

    load_data = PythonOperator(
        task_id="load_data", python_callable=load_from_csv, op_args=[table_name_new],
    )

    check_count = PostgresCheckOperator(
        task_id="check_count",
        sql=SQL_CHECK_COUNT,
        params=dict(tablename=table_name_new, mincount=4000),
    )

    check_geo = PostgresCheckOperator(
        task_id="check_geo",
        sql=SQL_CHECK_GEO,
        params=dict(
            tablename=table_name_new,
            geotype="ST_MultiPolygon",
            geo_column="terrasgeometrie",
        ),
    )

    rename_table = PostgresOperator(task_id="rename_table", sql=SQL_TABLE_RENAME)


# load_data >> check_count >> check_geo >> rename_table
load_data >> check_count >> rename_table
